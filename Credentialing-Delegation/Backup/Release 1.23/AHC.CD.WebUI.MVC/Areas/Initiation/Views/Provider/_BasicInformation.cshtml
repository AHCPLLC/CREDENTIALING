@model AHC.CD.WebUI.MVC.Areas.Initiation.Models.ProfileViewModel

<form id="BasicInformationForm">
    <div class="form-style">
        <fieldset>
            <legend>
                Basic Information
            </legend>
            <div class="col-lg-12 zero-padding-left-right-div">
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.NPINumber, htmlAttributes: new { @class = "control-label small" })
                    @Html.EditorFor(model => model.OtherIdentificationNumber.NPINumber, new { htmlAttributes = new { @class = "form-control input-sm", data_ng_model = "Profile.OtherIdentificationNumber.NPINumber", placeholder = "NPI number", data_ng_change = "IsValid('OtherIdentificationNumber_NPINumber')", data_ng_blur = "IsValid('OtherIdentificationNumber_NPINumber')", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.NPINumber, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.NPIUserName, htmlAttributes: new { @class = "control-label small" })
                    @Html.EditorFor(model => model.OtherIdentificationNumber.NPIUserName, new { htmlAttributes = new { @class = "form-control input-sm", data_ng_model = "Profile.OtherIdentificationNumber.NPIUserName", data_ng_disabled = "NPINumberValid", placeholder = "NPI user name", autocomplete = "off", data_ng_change = "NPIUserNameStatus()" } })
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.NPIUserName, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.NPIPassword, htmlAttributes: new { @class = "control-label small" })
                    <div class="input-group input-group-sm">
                        @Html.EditorFor(model => model.OtherIdentificationNumber.NPIPassword, new { htmlAttributes = new { type = "password", @class = "form-control", data_ng_model = "Profile.OtherIdentificationNumber.NPIPassword", data_ng_disabled = "NPINumberValid", placeholder = "NPI password", autocomplete = "off", data_ng_change = "NPIPasswordStatus()" } })
                        <span class="input-group-btn">
                            <button class="btn btn-default" ng-disabled="NPINumberValid" onmousedown="PasswordVisibleMouseDown('OtherIdentificationNumber_NPIPassword');" onmouseup="PasswordVisibleMouseUp('OtherIdentificationNumber_NPIPassword');" onmouseout="PasswordVisibleMouseUp('OtherIdentificationNumber_NPIPassword');"><i class="fa fa-eye"></i></button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.NPIPassword, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-12 zero-padding-left-right-div">
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.CAQHNumber, htmlAttributes: new { @class = "control-label small" })
                    @Html.EditorFor(model => model.OtherIdentificationNumber.CAQHNumber, new { htmlAttributes = new { @class = "form-control input-sm", data_ng_model = "Profile.OtherIdentificationNumber.CAQHNumber", placeholder = "CAQH number", data_ng_change = "IsValid('OtherIdentificationNumber_CAQHNumber')", data_ng_blur = "IsValid('OtherIdentificationNumber_CAQHNumber')", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.CAQHNumber, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.CAQHUserName, htmlAttributes: new { @class = "control-label small" })
                    @Html.EditorFor(model => model.OtherIdentificationNumber.CAQHUserName, new { htmlAttributes = new { @class = "form-control input-sm", data_ng_model = "Profile.OtherIdentificationNumber.CAQHUserName", data_ng_disabled = "CAQHNumberValid", placeholder = "CAQH user name", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.CAQHUserName, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4 form-group">
                    @Html.LabelFor(model => model.OtherIdentificationNumber.CAQHPassword, htmlAttributes: new { @class = "control-label small" })
                    <div class="input-group input-group-sm">
                        @Html.EditorFor(model => model.OtherIdentificationNumber.CAQHPassword, new { htmlAttributes = new { type = "password", @class = "form-control", data_ng_model = "Profile.OtherIdentificationNumber.CAQHPassword", data_ng_disabled = "CAQHNumberValid", placeholder = "CAQH password", autocomplete = "off" } })
                        <span class="input-group-btn">
                            <button class="btn btn-default" ng-disabled="CAQHNumberValid" onmousedown="PasswordVisibleMouseDown('OtherIdentificationNumber_CAQHPassword');" onmouseup="PasswordVisibleMouseUp('OtherIdentificationNumber_CAQHPassword');" onmouseout="PasswordVisibleMouseUp('OtherIdentificationNumber_CAQHPassword');"><i class="fa fa-eye"></i></button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.OtherIdentificationNumber.CAQHPassword, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-lg-12">
                <input id="next1" type="button" value="Proceed" ng-click="primaryInfoForm(1,'BasicInformationForm')" class="btn btn-primary btn-sm pull-right" />
            </div>
        </fieldset>
    </div>
</form>
{{BrowserName}}

<script>
    var nVer = navigator.appVersion;
    var nAgt = navigator.userAgent;
    var browserName = navigator.appName;
    var fullVersion = '' + parseFloat(navigator.appVersion);
    var majorVersion = parseInt(navigator.appVersion, 10);
    var nameOffset, verOffset, ix;

    // In Opera 15+, the true version is after "OPR/" 
    if ((verOffset = nAgt.indexOf("OPR/")) != -1) {
        browserName = "Opera";
        fullVersion = nAgt.substring(verOffset + 4);
    }
        // In older Opera, the true version is after "Opera" or after "Version"
    else if ((verOffset = nAgt.indexOf("Opera")) != -1) {
        browserName = "Opera";
        fullVersion = nAgt.substring(verOffset + 6);
        if ((verOffset = nAgt.indexOf("Version")) != -1)
            fullVersion = nAgt.substring(verOffset + 8);
    }
        // In MSIE, the true version is after "MSIE" in userAgent
    else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
        browserName = "MSIE";
        fullVersion = nAgt.substring(verOffset + 5);
    }
        // In Chrome, the true version is after "Chrome" 
    else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
        browserName = "Chrome";
        fullVersion = nAgt.substring(verOffset + 7);
    }
        // In Safari, the true version is after "Safari" or after "Version" 
    else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
        browserName = "Safari";
        fullVersion = nAgt.substring(verOffset + 7);
        if ((verOffset = nAgt.indexOf("Version")) != -1)
            fullVersion = nAgt.substring(verOffset + 8);
    }
        // In Firefox, the true version is after "Firefox" 
    else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
        browserName = "Firefox";
        fullVersion = nAgt.substring(verOffset + 8);
    }
        // In most other browsers, "name/version" is at the end of userAgent 
    else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <
              (verOffset = nAgt.lastIndexOf('/'))) {
        browserName = nAgt.substring(nameOffset, verOffset);
        fullVersion = nAgt.substring(verOffset + 1);
        if (browserName.toLowerCase() == browserName.toUpperCase()) {
            browserName = navigator.appName;
        }
    }
    // trim the fullVersion string at semicolon/space if present
    if ((ix = fullVersion.indexOf(";")) != -1)
        fullVersion = fullVersion.substring(0, ix);
    if ((ix = fullVersion.indexOf(" ")) != -1)
        fullVersion = fullVersion.substring(0, ix);

    majorVersion = parseInt('' + fullVersion, 10);
    if (isNaN(majorVersion)) {
        fullVersion = '' + parseFloat(navigator.appVersion);
        majorVersion = parseInt(navigator.appVersion, 10);
    }

    var DocNotPreviewBrowserName = browserName;

</script>
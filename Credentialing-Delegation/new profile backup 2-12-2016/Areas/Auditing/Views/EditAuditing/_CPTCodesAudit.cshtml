@model PortalTemplate.Areas.Auditing.Models.CreateAuditing.CPTCodesInfoViewModel

@{
    var AllCategories = ViewBag.AllCategories;
}
<fieldset class="fieldsetStyle">
    <legend class="legendstyle">Procedure Codes</legend>
    <div class="row">
        <div class="col-lg-12">
            <table class="table table-striped table-hover table-responsive custom-thead-back custom-thead-font custom-tbody custom-table-striped">
                <thead class="theme_thead checkstatus">
                    <tr>
                        <th class="col-lg-1">Code</th>
                        <th class="col-lg-2">Description </th>
                        <th class="col-lg-3">Modifier</th>
                        <th class="col-lg-3">DiagnosisPointer</th>
                        <th class="col-lg-1">Fee </th>
                        <th class="col-lg-1">
                            Agree<br /> <input type="radio" name="checkboxRadioHeader" class="checkbox-radio EditAgreeCPT" /><label><span></span></label>
                        </th>
                        <th class="col-lg-1">
                            Disagree <br /><input type="radio" name="checkboxRadioHeader" class="checkbox-radio EditDisagreeCPT" /><label><span></span></label>
                        </th>
                        <th class="col-lg-3">Category</th>
                        <th class="col-lg-3">Remarks</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="AuditCptcodebody_Edit">
                    @{
                        for (var i = 0; i < Model.CPTCodes.Count; i++)
                        {
                            if (Model.CPTCodes[i].isEnM)
                            {
                                <tr>
                                    <td class="col-lg-1">
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Code, new { @class = "form-control input-xs text-uppercase EnMCode_width" })
                                        @Html.ValidationMessageFor(m => m.CPTCodes[i].Code)
                                        <span class="charge badge EnMBadge">E&M</span>
                                    </td>
                                    <td class="col-lg-2"></td>
                                    <td class="col-lg-3"></td>
                                    <td class="col-lg-3"></td>
                                    <td class="col-lg-1">

                                        @Html.TextBoxFor(model => model.CPTCodes[i].Fee, new { @class = "form-control input-xs text-uppercase CPTFee_width" })
                                        <label class="CPTdollar_label">$</label>
                                        @Html.ValidationMessageFor(model => model.CPTCodes[i].Fee)
                                    </td>
                                    <td class="col-lg-1">
                                        @Html.RadioButtonFor(model => @Model.CPTCodes[i].IsAgree, true, new { @class = "normal-radio disagreeCheck" })
                                        <label><span></span></label>
                                    </td>
                                    <td class="col-lg-1">
                                        @Html.RadioButtonFor(model => @Model.CPTCodes[i].IsAgree, false, new { @class = "normal-radio disagreeCheck" })
                                        <label><span></span></label>

                                    </td>
                                    <td class="cptcategories col-lg-3">

                                        @foreach (var category in @Model.CPTCodes[i].Categories)
                                        {
                                            @Html.TextBoxFor(model => category.CategoryName, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field isAgree" })
                                        }
                                    </td>
                                    <td class="cptremarks col-lg-3">
                                        @foreach (var remarks in @Model.CPTCodes[i].Categories)
                                        {
                                            @*<label class="remarks_width">@remarks.CategoryName</label>*@
                                            @Html.TextAreaFor(m => remarks.Remarks, new { @class = "form-control input-xs non_mandatory_field_halo isAgree remarks_width" })
                                        }
                                    </td>
                                    <td>
                                        @*<button class="btn btn-xs btn-danger" type="button" onclick="RemoveThisRow(this)"><i class="fa fa fa-minus"></i></button>*@
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="col-lg-1">
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Code, new { @class = "form-control input-xs text-uppercase code_width" })
                                        @Html.ValidationMessageFor(m => m.CPTCodes[i].Code)
                                    </td>
                                    <td class="col-lg-2">
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Description, new { @class = "form-control input-xs text-uppercase" })
                                    </td>
                                    <td class="col-lg-3">
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Modifier1, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field" })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Modifier2, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field" })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Modifier3, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field" })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].Modifier4, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field" })

                                    </td>
                                    <td class="col-lg-3">
                                        @Html.TextBoxFor(model => model.CPTCodes[i].DiagnosisPointer1, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field " })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].DiagnosisPointer2, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field " })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].DiagnosisPointer3, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field " })
                                        @Html.TextBoxFor(model => model.CPTCodes[i].DiagnosisPointer4, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field " })
                                        <a class="btn btn-xs openDiagnosisModal padding_left_1px"><i class=" fa fa-forward"></i></a>
                                    </td>
                                    <td class="col-lg-1">

                                        @Html.TextBoxFor(model => model.CPTCodes[i].Fee, new { @class = "form-control input-xs text-uppercase CPTFee_width" })
                                        <label class="CPTdollar_label">$</label>
                                        @Html.ValidationMessageFor(model => model.CPTCodes[i].Fee)
                                    </td>
                                    <td class="col-lg-1">
                                        @Html.RadioButtonFor(model => @Model.CPTCodes[i].IsAgree, true, new { @class = "normal-radio disagreeCheck" })
                                        <label><span></span></label>
                                    </td>
                                    <td class="col-lg-1">
                                        @Html.RadioButtonFor(model => @Model.CPTCodes[i].IsAgree, false, new { @class = "normal-radio disagreeCheck" })
                                        <label><span></span></label>

                                    </td>
                                    <td class="cptcategories col-lg-3">

                                        @foreach (var category in @Model.CPTCodes[i].Categories)
                                        {
                                            @Html.TextBoxFor(model => category.CategoryName, new { @class = "form-control input-xs text-uppercase modifier_width read_only_field isAgree" })
                                        }
                                    </td>
                                    <td class="cptremarks col-lg-3">
                                        @foreach (var remarks in @Model.CPTCodes[i].Categories)
                                        {
                                            @*<label class="remarks_width">@remarks.CategoryName</label>*@
                                            @Html.TextAreaFor(m => remarks.Remarks, new { @class = "form-control input-xs non_mandatory_field_halo isAgree remarks_width" })
                                        }
                                    </td>
                                    <td>
                                        @*<button class="btn btn-xs btn-danger" type="button" onclick="RemoveThisRow(this)"><i class="fa fa fa-minus"></i></button>*@
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
            <button type="button" class="light-green-button pull-right AddNewRowCPTTable_EditAudit"><i class="fa fa-plus"></i></button>
        </div>
    </div>
</fieldset>
<p-script filepath="~/Areas/Auditing/Scripts/AppJs/EditAuditing/NonMinified/_CPTCodesAudit.js"></p-script>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortalTemplate.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProviderType", Namespace="http://schemas.datacontract.org/2004/07/AHC.DataService.MDM.Common.Entities")]
    [System.SerializableAttribute()]
    public partial class ProviderType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProviderTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PortalTemplate.ServiceReference1.Specialty[] SpecialitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PortalTemplate.ServiceReference1.SpecialtyBoard[] SpecialtyBoardsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProviderTypeID {
            get {
                return this.ProviderTypeIDField;
            }
            set {
                if ((this.ProviderTypeIDField.Equals(value) != true)) {
                    this.ProviderTypeIDField = value;
                    this.RaisePropertyChanged("ProviderTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PortalTemplate.ServiceReference1.Specialty[] Specialities {
            get {
                return this.SpecialitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialitiesField, value) != true)) {
                    this.SpecialitiesField = value;
                    this.RaisePropertyChanged("Specialities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PortalTemplate.ServiceReference1.SpecialtyBoard[] SpecialtyBoards {
            get {
                return this.SpecialtyBoardsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialtyBoardsField, value) != true)) {
                    this.SpecialtyBoardsField = value;
                    this.RaisePropertyChanged("SpecialtyBoards");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusType {
            get {
                return this.StatusTypeField;
            }
            set {
                if ((this.StatusTypeField.Equals(value) != true)) {
                    this.StatusTypeField = value;
                    this.RaisePropertyChanged("StatusType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Specialty", Namespace="http://schemas.datacontract.org/2004/07/AHC.DataService.MDM.Common.Entities")]
    [System.SerializableAttribute()]
    public partial class Specialty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PortalTemplate.ServiceReference1.ProviderType[] ProviderTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpecialtyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaxonomyCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PortalTemplate.ServiceReference1.ProviderType[] ProviderTypes {
            get {
                return this.ProviderTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderTypesField, value) != true)) {
                    this.ProviderTypesField = value;
                    this.RaisePropertyChanged("ProviderTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpecialtyID {
            get {
                return this.SpecialtyIDField;
            }
            set {
                if ((this.SpecialtyIDField.Equals(value) != true)) {
                    this.SpecialtyIDField = value;
                    this.RaisePropertyChanged("SpecialtyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusType {
            get {
                return this.StatusTypeField;
            }
            set {
                if ((this.StatusTypeField.Equals(value) != true)) {
                    this.StatusTypeField = value;
                    this.RaisePropertyChanged("StatusType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaxonomyCode {
            get {
                return this.TaxonomyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TaxonomyCodeField, value) != true)) {
                    this.TaxonomyCodeField = value;
                    this.RaisePropertyChanged("TaxonomyCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialtyBoard", Namespace="http://schemas.datacontract.org/2004/07/AHC.DataService.MDM.Common.Entities")]
    [System.SerializableAttribute()]
    public partial class SpecialtyBoard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PortalTemplate.ServiceReference1.ProviderType[] ProviderTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpecialtyBoardIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PortalTemplate.ServiceReference1.ProviderType[] ProviderTypes {
            get {
                return this.ProviderTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderTypesField, value) != true)) {
                    this.ProviderTypesField = value;
                    this.RaisePropertyChanged("ProviderTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpecialtyBoardID {
            get {
                return this.SpecialtyBoardIDField;
            }
            set {
                if ((this.SpecialtyBoardIDField.Equals(value) != true)) {
                    this.SpecialtyBoardIDField = value;
                    this.RaisePropertyChanged("SpecialtyBoardID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<PortalTemplate.ServiceReference1.StatusType> StatusType {
            get {
                return this.StatusTypeField;
            }
            set {
                if ((this.StatusTypeField.Equals(value) != true)) {
                    this.StatusTypeField = value;
                    this.RaisePropertyChanged("StatusType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusType", Namespace="http://schemas.datacontract.org/2004/07/AHC.DataService.MDM.Common.Enums")]
    public enum StatusType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IProviderTypeService")]
    public interface IProviderTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypes", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesResponse")]
        PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypes", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesResponse")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesWithSelectedcolumns", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesWithSelectedcolumnsRes" +
            "ponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.ProviderType[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.ProviderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.Specialty[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.Specialty))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.SpecialtyBoard[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.SpecialtyBoard))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PortalTemplate.ServiceReference1.StatusType))]
        object[] GetAllProviderTypesWithSelectedcolumns(object providerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesWithSelectedcolumns", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesWithSelectedcolumnsRes" +
            "ponse")]
        System.Threading.Tasks.Task<object[]> GetAllProviderTypesWithSelectedcolumnsAsync(object providerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitle", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitleRespons" +
            "e")]
        PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypesByProviderTitle(string ProviderTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitle", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitleRespons" +
            "e")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesByProviderTitleAsync(string ProviderTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCode", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodeResponse")]
        PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypeByProviderCode(string providerCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCode", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodeResponse")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypeByProviderCodeAsync(string providerCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodes", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodesResponse" +
            "")]
        PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypeByProviderCodes(string[] providerCodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodes", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypeByProviderCodesResponse" +
            "")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypeByProviderCodesAsync(string[] providerCodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitles", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitlesRespon" +
            "se")]
        PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypesByProviderTitles(string[] ProviderTitles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitles", ReplyAction="http://tempuri.org/IProviderTypeService/GetAllProviderTypesByProviderTitlesRespon" +
            "se")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesByProviderTitlesAsync(string[] ProviderTitles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/UpdateProviderType", ReplyAction="http://tempuri.org/IProviderTypeService/UpdateProviderTypeResponse")]
        PortalTemplate.ServiceReference1.ProviderType UpdateProviderType(PortalTemplate.ServiceReference1.ProviderType providerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/UpdateProviderType", ReplyAction="http://tempuri.org/IProviderTypeService/UpdateProviderTypeResponse")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType> UpdateProviderTypeAsync(PortalTemplate.ServiceReference1.ProviderType providerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/AddProviderType", ReplyAction="http://tempuri.org/IProviderTypeService/AddProviderTypeResponse")]
        PortalTemplate.ServiceReference1.ProviderType AddProviderType(PortalTemplate.ServiceReference1.ProviderType providerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProviderTypeService/AddProviderType", ReplyAction="http://tempuri.org/IProviderTypeService/AddProviderTypeResponse")]
        System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType> AddProviderTypeAsync(PortalTemplate.ServiceReference1.ProviderType providerType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProviderTypeServiceChannel : PortalTemplate.ServiceReference1.IProviderTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProviderTypeServiceClient : System.ServiceModel.ClientBase<PortalTemplate.ServiceReference1.IProviderTypeService>, PortalTemplate.ServiceReference1.IProviderTypeService {
        
        public ProviderTypeServiceClient() {
        }
        
        public ProviderTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProviderTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProviderTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProviderTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypes() {
            return base.Channel.GetAllProviderTypes();
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesAsync() {
            return base.Channel.GetAllProviderTypesAsync();
        }
        
        public object[] GetAllProviderTypesWithSelectedcolumns(object providerType) {
            return base.Channel.GetAllProviderTypesWithSelectedcolumns(providerType);
        }
        
        public System.Threading.Tasks.Task<object[]> GetAllProviderTypesWithSelectedcolumnsAsync(object providerType) {
            return base.Channel.GetAllProviderTypesWithSelectedcolumnsAsync(providerType);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypesByProviderTitle(string ProviderTitle) {
            return base.Channel.GetAllProviderTypesByProviderTitle(ProviderTitle);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesByProviderTitleAsync(string ProviderTitle) {
            return base.Channel.GetAllProviderTypesByProviderTitleAsync(ProviderTitle);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypeByProviderCode(string providerCode) {
            return base.Channel.GetAllProviderTypeByProviderCode(providerCode);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypeByProviderCodeAsync(string providerCode) {
            return base.Channel.GetAllProviderTypeByProviderCodeAsync(providerCode);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypeByProviderCodes(string[] providerCodes) {
            return base.Channel.GetAllProviderTypeByProviderCodes(providerCodes);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypeByProviderCodesAsync(string[] providerCodes) {
            return base.Channel.GetAllProviderTypeByProviderCodesAsync(providerCodes);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType[] GetAllProviderTypesByProviderTitles(string[] ProviderTitles) {
            return base.Channel.GetAllProviderTypesByProviderTitles(ProviderTitles);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType[]> GetAllProviderTypesByProviderTitlesAsync(string[] ProviderTitles) {
            return base.Channel.GetAllProviderTypesByProviderTitlesAsync(ProviderTitles);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType UpdateProviderType(PortalTemplate.ServiceReference1.ProviderType providerType) {
            return base.Channel.UpdateProviderType(providerType);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType> UpdateProviderTypeAsync(PortalTemplate.ServiceReference1.ProviderType providerType) {
            return base.Channel.UpdateProviderTypeAsync(providerType);
        }
        
        public PortalTemplate.ServiceReference1.ProviderType AddProviderType(PortalTemplate.ServiceReference1.ProviderType providerType) {
            return base.Channel.AddProviderType(providerType);
        }
        
        public System.Threading.Tasks.Task<PortalTemplate.ServiceReference1.ProviderType> AddProviderTypeAsync(PortalTemplate.ServiceReference1.ProviderType providerType) {
            return base.Channel.AddProviderTypeAsync(providerType);
        }
    }
}
